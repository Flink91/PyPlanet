cache:
  - "%LOCALAPPDATA%\\pip\\Cache"

environment:
  global:
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\tests\\_scripts\\run_with_env.cmd"

  matrix:
    - PYTHON: "C:\\Python35-x64"
      PYTHON_VERSION: "3.5.3"
      PYTHON_ARCH: "64"

install:
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "pip install --disable-pip-version-check --user --upgrade pip"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% pip install -r requirements.txt"

  # Install pyinstaller
  - "%CMD_IN_ENV% pip install pyinstaller"

build_script:
  # Build the compiled extension
  - "%CMD_IN_ENV% python setup.py build"
  - "%CMD_IN_ENV% pyinstaller pyplanet.spec"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*
